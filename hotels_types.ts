/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export type paths = {
    "/add_customer": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Add customer to booking
         * @description Add a customer to an existing hotel booking
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Add customer request */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["AddCustomerRequest"];
                };
            };
            responses: {
                /** @description Customer successfully added to booking */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["MessageResponse"];
                    };
                };
                /** @description Bad request - validation errors */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Booking not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/availability": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Search for hotel availability
         * @description Search for hotel availability by airport code with various filters
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Availability search request */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["AvailabilityRequest"];
                };
            };
            responses: {
                /** @description Availability data with neighborhoods and popular destinations */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AvailabilityResponse"];
                    };
                };
                /** @description Bad request - validation errors */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/booking": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a hotel booking
         * @description Retrieve details of a specific hotel booking by booking ID
         */
        get: {
            parameters: {
                query: {
                    /**
                     * @description Booking ID
                     * @example "507f1f77bcf86cd799439011"
                     */
                    bookingId: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Booking details */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Itinerary"];
                    };
                };
                /** @description Bad request - invalid booking ID or Rapid API errors */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["RapidError"];
                    };
                };
                /** @description Booking not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bookings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve customer bookings
         * @description Retrieve all bookings for a specific customer by customer ID
         */
        get: {
            parameters: {
                query: {
                    /**
                     * @description Customer ID
                     * @example "CUST123456"
                     */
                    customerId: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of customer bookings */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["RetrieveBookingsResponse"][];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/notification/expedia": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Handle Expedia notifications
         * @description Process incoming notifications from Expedia for booking updates
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Notification request */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["NotificationRequest"];
                };
            };
            responses: {
                /** @description Booking updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["MessageResponse"];
                    };
                };
                /** @description Bad request - validation errors */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Booking not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/payment_options": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Retrieve payment options
         * @description Retrieve available payment options for a hotel booking
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Payment options request */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["PaymentOptionsRequest"];
                };
            };
            responses: {
                /** @description Available payment options */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PaymentOptionsResponse"];
                    };
                };
                /** @description Bad request - validation errors or Rapid API errors */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["RapidError"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/price_check": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Check price for hotel booking
         * @description Check if the price for a hotel booking has changed since the initial availability check
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Price check request */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["PriceCheckRequest"];
                };
            };
            responses: {
                /** @description Price check response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["RapidRate"];
                    };
                };
                /** @description Bad request - validation errors or Rapid API errors */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["RapidError"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/property_availability": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Search for single property availability
         * @description Search for availability of a specific property by property ID
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Single property availability request */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["PropertyAvailabilityRequest"];
                };
            };
            responses: {
                /** @description Property availability data */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AvailabilityResponse"];
                    };
                };
                /** @description Bad request - validation errors */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/property_search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Search for properties
         * @description Search for hotel properties by airport code or region ID, filtered by property name
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Property search request */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["PropertySearchRequest"];
                };
            };
            responses: {
                /** @description List of matching properties */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PropertySearchResponse"][];
                    };
                };
                /** @description Bad request - validation errors */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/record_booking": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Record a hotel booking
         * @description Record a new hotel booking in the system
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Booking record request */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["RecordBookingRequest"];
                };
            };
            responses: {
                /** @description Booking saved successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["MessageResponse"];
                    };
                };
                /** @description Bad request - validation errors */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/region_availability": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Search for region availability
         * @description Search for hotel availability in a specific region with various filters
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Region availability search request */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["RegionAvailabilityRequest"];
                };
            };
            responses: {
                /** @description Region availability data with neighborhoods and popular destinations */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AvailabilityResponse"];
                    };
                };
                /** @description Bad request - validation errors */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
};
export type webhooks = Record<string, never>;
export type components = {
    schemas: {
        /** @description Add customer to booking request parameters */
        AddCustomerRequest: {
            /**
             * @description Booking key to add the customer to
             * @example BK123456789
             */
            bookingKey: string;
            /**
             * @description Guest customer ID to add to the booking
             * @example CUST123456
             */
            guestCustomerId: string;
        };
        /** @description Availability search request parameters */
        AvailabilityRequest: {
            /**
             * @description Airport code for searching availability
             * @example MIA
             */
            airportCode: string;
            /**
             * @description Amenities filter
             * @example [
             *       "wifi",
             *       "pool"
             *     ]
             */
            amenities?: string[];
            /**
             * @description Check-in date in YYYY-MM-DD format
             * @example 2024-12-25
             */
            checkIn: string;
            /**
             * @description Check-out date in YYYY-MM-DD format
             * @example 2024-12-30
             */
            checkOut: string;
            /**
             * @description Deprecated old filters for backwards compatability (non-breaking)
             * @example 500
             */
            maximumNightlyPrice?: number;
            /**
             * @description Maximum Total price filter
             * @example 500
             */
            maximumTotalPrice?: number;
            /** @example 500 */
            minimuimNightlyPrice?: number;
            /**
             * @description Minimum guest rating filter
             * @example 4
             */
            minimumGuestRating?: number;
            /**
             * @description Minimum total price filter
             * @example 100
             */
            minimumTotalPrice?: number;
            /**
             * @description Occupancy information (e.g., ["2-1,4,9"])
             * @example [
             *       "2-1",
             *       "4",
             *       "9"
             *     ]
             */
            occupancy: string[];
            /**
             * @description Sales channel identifier
             * @example web
             */
            salesChannel: string;
            /**
             * @description Star ratings filter
             * @example [
             *       3,
             *       4,
             *       5
             *     ]
             */
            starRatings?: number[];
        };
        /** @description Notification request parameters from Expedia */
        NotificationRequest: {
            /**
             * @description Affiliate reference ID for the booking
             * @example REF123456
             */
            affiliate_reference_id?: string;
            /**
             * @description Email address (optional)
             * @example customer@example.com
             */
            email?: string;
            /**
             * @description Unique event identifier
             * @example evt_123456789
             */
            event_id: string;
            /**
             * @description Timestamp of the event
             * @example 2024-12-25T10:30:00Z
             */
            event_time: string;
            /**
             * @description Type of notification event
             * @example itinerary.message.received
             */
            event_type: string;
            /**
             * @description Itinerary ID (optional)
             * @example ITN123456
             */
            itinerary_id?: string;
            /**
             * @description Message content (optional)
             * @example Your booking has been confirmed
             */
            message?: string;
            /**
             * @description Topic tags (optional)
             * @example confirmation,hotel
             */
            topic_tags?: string;
        };
        /** @description Payment options request parameters */
        PaymentOptionsRequest: {
            /**
             * @description URL to fetch payment options from
             * @example /v3/shopping/hotel-offers/12345/payment-options
             */
            paymentOptionsToken: string;
        };
        /** @description Price check request parameters */
        PriceCheckRequest: {
            /**
             * @description Occupancy information (e.g., ["2-1,4,9"])
             * @example [
             *       "2-1",
             *       "4",
             *       "9"
             *     ]
             */
            occupancy: string[];
            /**
             * @description Price check token from previous availability response
             * @example /v3/shopping/hotel-offers/12345/price-check
             */
            priceCheckToken: string;
        };
        /** @description Single property availability request parameters */
        PropertyAvailabilityRequest: {
            /**
             * @description Check-in date in YYYY-MM-DD format
             * @example 2024-12-25
             */
            checkIn: string;
            /**
             * @description Check-out date in YYYY-MM-DD format
             * @example 2024-12-30
             */
            checkOut: string;
            /**
             * @description Occupancy information (e.g., ["2-1,4,9"])
             * @example [
             *       "2-1",
             *       "4",
             *       "9"
             *     ]
             */
            occupancy: string[];
            /**
             * @description Property ID to search availability for
             * @example 12345
             */
            propertyId: string;
            /**
             * @description Sales channel identifier
             * @example web
             */
            salesChannel: string;
        };
        /** @description Property search request parameters */
        PropertySearchRequest: {
            /**
             * @description Airport code for searching properties near an airport
             * @example MIA
             */
            airportCode?: string;
            /**
             * @description Property name to search for
             * @example Hilton
             */
            propertyName: string;
            /**
             * @description Region ID for searching properties in a specific region
             * @example 123
             */
            regionID?: number;
        };
        /** @description Property search response item */
        PropertySearchResponse: {
            /**
             * @description Unique identifier for the property
             * @example 12345
             */
            propertyId?: string;
            /**
             * @description Name of the property
             * @example Hilton Miami Airport
             */
            propertyName?: string;
        };
        /** @description Region availability search request parameters */
        RegionAvailabilityRequest: {
            /**
             * @description Amenities filter
             * @example [
             *       "wifi",
             *       "pool"
             *     ]
             */
            amenities?: string[];
            /**
             * @description Check-in date in YYYY-MM-DD format
             * @example 2024-12-25
             */
            checkIn: string;
            /**
             * @description Check-out date in YYYY-MM-DD format
             * @example 2024-12-30
             */
            checkOut: string;
            /**
             * @description Maximum nightly price filter
             * @example 500
             */
            maximumNightlyPrice?: number;
            /**
             * @description Minimum guest rating filter
             * @example 4
             */
            minimumGuestRating?: number;
            /**
             * @description Minimum nightly price filter
             * @example 100
             */
            minimumNightlyPrice?: number;
            /**
             * @description Occupancy information (e.g., ["2-1,4,9"])
             * @example [
             *       "2-1",
             *       "4",
             *       "9"
             *     ]
             */
            occupancy: string[];
            /**
             * @description Region ID to search availability for
             * @example 123
             */
            regionID: number;
            /**
             * @description Sales channel identifier
             * @example web
             */
            salesChannel: string;
            /**
             * @description Star ratings filter
             * @example [
             *       3,
             *       4,
             *       5
             *     ]
             */
            starRatings?: number[];
        };
        /** @description Booking retrieval response item */
        RetrieveBookingsResponse: {
            /**
             * @description The date of the arrival flight for the trip, formatted as YYYY-MM-DD.
             * @example 2025-08-31
             */
            arrivalFlightDate?: string;
            /**
             * @description Booking key identifier, a unique string that identifies a specific booking.
             * @example BK123456789
             */
            bookingKey?: string;
            /**
             * @description The date the guest checks into the hotel, formatted as YYYY-MM-DD.
             * @example 2025-09-01
             */
            checkInDate?: string;
            /**
             * @description The date the guest checks out of the hotel, formatted as YYYY-MM-DD.
             * @example 2025-09-05
             */
            checkOutDate?: string;
            /**
             * @description The date of the departure flight for the trip, formatted as YYYY-MM-DD.
             * @example 2025-09-06
             */
            departureFlightDate?: string;
            /**
             * @description The IATA code of the destination airport for the flight.
             * @example LAX
             */
            destinationStation?: string;
            /**
             * @description The name of the hotel associated with the booking.
             * @example Grand Hyatt
             */
            hotelName?: string;
            /**
             * @description The IATA code of the origin airport for the flight.
             * @example JFK
             */
            originStation?: string;
        };
        Address: {
            city?: string;
            /** @default US */
            country_code: string;
            line_1?: string;
            line_2?: string;
            postal_code?: string;
            state_province_code?: string;
        };
        AgeCategory: {
            /**
             * @description Minimum age for the category
             * @example 12
             */
            minimum_age?: number;
            /**
             * @description Age category name
             * @example child
             */
            name?: string;
        };
        Amenity: {
            /**
             * @description Amenity categories
             * @example [
             *       "room",
             *       "property"
             *     ]
             */
            categories?: string[];
            /**
             * @description Amenity ID from Expedia
             * @example 1
             */
            id?: number;
            /**
             * @description Amenity name
             * @example Free WiFi
             */
            name?: string;
        };
        Area: {
            /**
             * @description Area in square feet
             * @example 323
             */
            square_feet?: number;
            /**
             * @description Area in square meters
             * @example 30
             */
            square_meters?: number;
        };
        Attributes: {
            general?: string[];
            pets?: string[];
        };
        BedGroup: {
            /** @description Bed group configurations */
            configuration?: components["schemas"]["Configuration"][];
            /**
             * @description Bed group description
             * @example King Bed
             */
            description?: string;
            /**
             * @description Bed group ID from Expedia
             * @example 1
             */
            id?: number;
        };
        BillableCurrency: {
            /** @example USD */
            currency?: string;
            /** @example 100 */
            value?: number;
        };
        CancelPenalty: {
            /**
             * @description Amount for the penalty in the given Currency
             * @example 200
             */
            amount?: string;
            /**
             * @description Currency code for the penalty amount
             * @example USD
             */
            currency?: string;
            /**
             * @description Penalty end time
             * @example 2024-12-26T10:30:00Z
             */
            end?: string;
            /**
             * @description Number of nights for the penalty
             * @example 2
             */
            nights?: number;
            /**
             * @description Percent of the total price is the penalty for cancelling
             * @example 25%
             */
            percent?: string;
            /**
             * @description Penalty start time
             * @example 2024-12-25T10:30:00Z
             */
            start?: string;
        };
        CancelRefund: {
            /**
             * @description Refund amount
             * @example 100
             */
            amount?: number;
            /**
             * @description Currency code
             * @example USD
             */
            currency?: string;
        };
        Configuration: {
            /**
             * @description Quantity of beds in the configuration
             * @example 2
             */
            quantity?: number;
            /**
             * @description Size of the bed
             * @example Queen
             */
            size?: string;
            /**
             * @description Type of the bed
             * @example Sofa Bed
             */
            type?: string;
        };
        Contact: {
            address?: components["schemas"]["Address"];
            family_name?: string;
            given_name?: string;
        };
        Conversation: {
            links?: components["schemas"]["Link"][];
        };
        DateRange: {
            /**
             * @description End date
             * @example 2024-12-26
             */
            end?: string;
            /**
             * @description Start date
             * @example 2024-12-25
             */
            start?: string;
        };
        Description: {
            key?: string;
            value?: string;
        };
        GuestRating: {
            amenities?: number;
            cleanliness?: number;
            comfort?: number;
            condition?: number;
            count?: number;
            location?: number;
            neighborhood?: number;
            overall?: number;
            quality?: number;
            recommendation_percent?: number;
            service?: number;
            value?: number;
        };
        Image: {
            caption?: string;
            category?: number;
            category_description?: string;
            hero_image?: boolean;
            links?: components["schemas"]["Link"][];
        };
        Link: {
            href?: string;
            key?: string;
            method?: string;
        };
        MaxAllowed: {
            /**
             * @description Maximum adults allowed
             * @example 2
             */
            adults?: number;
            /**
             * @description Maximum children allowed
             * @example 2
             */
            children?: number;
            /**
             * @description Total maximum allowed
             * @example 4
             */
            total?: number;
        };
        Occupancy: {
            age_categories?: components["schemas"]["AgeCategory"][];
            max_allowed?: components["schemas"]["MaxAllowed"];
        };
        Phone: {
            area_code?: string;
            country_code?: string;
            number?: string;
        };
        Price: {
            /** @example USD */
            currency?: string;
            /** @example base */
            type?: string;
            /** @example 100 */
            value?: number;
        };
        Pricing: {
            nightly?: components["schemas"]["Price"][][];
            stay?: components["schemas"]["Price"][];
            totals?: components["schemas"]["Totals"];
        };
        PropertyRating: {
            rating?: number;
            type?: string;
        };
        Rate: {
            /** @description Rate amenities */
            amenities?: components["schemas"]["Amenity"][];
            /** @description Cancel penalties */
            cancel_penalties?: components["schemas"]["CancelPenalty"][];
            /** @description Cancel refund information */
            cancel_refund?: components["schemas"]["CancelRefund"];
            /**
             * @description Rate ID from Expedia
             * @example 1
             */
            id?: number;
            /**
             * @description Merchant of record
             * @example Expedia
             */
            merchant_of_record?: string;
            /** @description Nonrefundable date ranges */
            nonrefundable_date_ranges?: components["schemas"]["DateRange"][];
            /** @description Rate pricing information */
            pricing?: components["schemas"]["Pricing"];
            /**
             * @description Special request
             * @example Late check-in
             */
            special_request?: string;
        };
        RecordBookingRequest: {
            arrivalFlightDate: string;
            bookingKey: string;
            bookingRetrievalLink: string;
            bundle: string;
            checkInDate: string;
            checkOutDate: string;
            confirmationNumber?: string;
            departureFlightDate?: string;
            destinationStation: string;
            flightAdults: number;
            flightChildren?: number;
            guestCustomerId: string;
            guestEmail: string;
            guestFirstName: string;
            guestLastName: string;
            hotelOccupancy: string[];
            hotelPrice: number;
            originStation: string;
            propertyId: string;
            roomName: string;
            taxesAndFees: number;
        };
        /** @description Hotel room booking details */
        Room: {
            /** @description Room amenities */
            amenities?: components["schemas"]["Amenity"][];
            /** @description Room area information */
            area?: components["schemas"]["Area"];
            /**
             * @description Bed group ID from Expedia
             * @example 1
             */
            bed_group_id?: number;
            /**
             * @description Bed group name from Expedia
             * @example 1 King Bed
             */
            bed_group_name?: string;
            /** @description Bed group information */
            bed_groups?: components["schemas"]["BedGroup"][];
            /**
             * @description Check-in date
             * @example 2024-12-25
             */
            checkin?: string;
            /**
             * @description Check-out date
             * @example 2024-12-30
             */
            checkout?: string;
            /** @description Confirmation ID mapping */
            confirmation_id?: {
                [key: string]: string;
            };
            /** @description Room descriptions */
            descriptions?: components["schemas"]["Description"][];
            /**
             * @description Guest family name
             * @example Doe
             */
            family_name?: string;
            /**
             * @description Guest given name
             * @example John
             */
            given_name?: string;
            /**
             * @description Room ID from Expedia
             * @example 1
             */
            id?: number;
            /** @description Room images */
            images?: components["schemas"]["Image"][];
            /** @description Room links */
            links?: components["schemas"]["Link"][];
            /**
             * @description Room name
             * @example Deluxe King Room
             */
            name?: string;
            /**
             * @description Number of adults
             * @example 2
             */
            number_of_adults?: number;
            /** @description Room occupancy details */
            occupancy?: components["schemas"]["Occupancy"];
            /** @description Room rate information */
            rate?: components["schemas"]["Rate"];
            /**
             * @description Smoking preference
             * @example false
             */
            smoking?: boolean;
            /**
             * @description Special requests
             * @example Late check-in
             */
            special_request?: string;
            /**
             * @description Room status
             * @example confirmed
             */
            status?: string;
        };
        Total: {
            billable_currency?: components["schemas"]["BillableCurrency"];
        };
        Totals: {
            exclusive?: components["schemas"]["Total"];
            inclusive?: components["schemas"]["Total"];
            inclusive_strikethrough?: components["schemas"]["Total"];
            marketing_fee?: components["schemas"]["Total"];
            property_fees?: components["schemas"]["Total"];
            property_inclusive?: components["schemas"]["Total"];
            property_inclusive_strikethrough?: components["schemas"]["Total"];
            strikethrough?: components["schemas"]["Total"];
        };
        BaseImage: {
            size?: string;
            url?: string;
        };
        CurrencyDetail: {
            currency?: string;
            value?: string;
        };
        /** @description Hotel booking itinerary details */
        Itinerary: {
            /**
             * @description Affiliate reference ID for the booking
             * @example REF123456
             */
            affiliate_reference_id?: string;
            /** @description Billing contact information */
            billing_contact?: components["schemas"]["Contact"];
            /** @description Conversation history */
            conversations?: components["schemas"]["Conversation"];
            /**
             * @description Creation date and time of the itinerary
             * @example 2024-12-25T10:30:00Z
             */
            creation_date_time?: string;
            /**
             * @description Email address for the booking
             * @example customer@example.com
             */
            email?: string;
            /**
             * @description Itinerary ID from Expedia
             * @example 12345
             */
            itinerary_id?: number;
            /** @description Phone contact information */
            phone?: components["schemas"]["Phone"];
            /**
             * @description Property ID from Expedia
             * @example 67890
             */
            property_id?: number;
            /** @description Room details for the booking */
            rooms?: components["schemas"]["Room"][];
        };
        Links: {
            book?: components["schemas"]["RapidLink"];
            payment_options?: components["schemas"]["RapidLink"];
            price_check?: components["schemas"]["RapidLink"];
        };
        PriceCurrencyDetail: {
            request_currency?: components["schemas"]["CurrencyDetail"];
        };
        PriceDetail: {
            type?: string;
            value?: string;
        };
        Promotion: {
            description?: string;
        };
        RapidBedGroup: {
            description?: string;
            links?: components["schemas"]["Links"];
        };
        RapidError: {
            errors?: components["schemas"]["RapidError"][];
            message?: string;
            type?: string;
        };
        RapidImage: {
            caption?: string;
            category?: number;
            category_description?: string;
            details?: components["schemas"]["BaseImage"][];
            hero_image?: boolean;
        };
        RapidLink: {
            href?: string;
        };
        RapidPricing: {
            fees?: {
                [key: string]: components["schemas"]["PriceCurrencyDetail"];
            };
            nightly?: components["schemas"]["PriceDetail"][][];
            stay?: components["schemas"]["PriceDetail"][];
            totals?: {
                [key: string]: components["schemas"]["PriceCurrencyDetail"];
            };
        };
        RapidRate: {
            bed_groups?: {
                [key: string]: components["schemas"]["RapidBedGroup"];
            };
            cancel_penalties?: components["schemas"]["CancelPenalty"][];
            links?: components["schemas"]["Links"];
            marketing_fee_incentives?: string[];
            nonrefundable_date_ranges?: components["schemas"]["DateRange"][];
            occupancy_pricing?: {
                [key: string]: components["schemas"]["RapidPricing"];
            };
            promotions?: {
                [key: string]: components["schemas"]["Promotion"];
            };
            refundable?: boolean;
            status?: string;
        };
        RapidRoom: {
            amenities?: components["schemas"]["Amenity"][];
            id?: string;
            images?: components["schemas"]["RapidImage"][];
            occupancy?: components["schemas"]["Occupancy"];
            rates?: components["schemas"]["RapidRate"][];
            room_name?: string;
        };
        AvailabilityResponse: {
            availability?: components["schemas"]["PropertyAvailability"][];
            neighborhoods?: {
                [key: string]: string;
            }[];
            popularDestinations?: {
                [key: string]: string;
            }[];
        };
        ErrorResponse: {
            message?: string;
            type?: string;
        };
        MessageResponse: {
            message?: string;
        };
        PaymentOptionsResponse: {
            processing_country?: string;
            valid_card_options?: string[];
        };
        PropertyAddress: {
            city?: string;
            line1?: string;
            line2?: string;
            state?: string;
            zip?: string;
        };
        PropertyAvailability: {
            amenities?: components["schemas"]["Amenity"][];
            attributes?: components["schemas"]["Attributes"];
            checkin?: {
                [key: string]: string;
            };
            checkout?: {
                [key: string]: string;
            };
            descriptions?: {
                [key: string]: string;
            };
            distanceToAirport?: number;
            fees?: {
                [key: string]: string;
            };
            guestRating?: components["schemas"]["GuestRating"];
            images?: components["schemas"]["RapidImage"][];
            policies?: {
                [key: string]: string;
            };
            propertyAddress?: components["schemas"]["PropertyAddress"];
            propertyCoordinates?: components["schemas"]["PropertyCoordinates"];
            propertyId?: string;
            propertyName?: string;
            propertyPhone?: string;
            propertyRating?: components["schemas"]["PropertyRating"];
            roomsAvailable?: components["schemas"]["RapidRoom"][];
        };
        PropertyCoordinates: {
            latitude?: number;
            longitude?: number;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
};
export type AddCustomerRequest = components['schemas']['AddCustomerRequest'];
export type AvailabilityRequest = components['schemas']['AvailabilityRequest'];
export type NotificationRequest = components['schemas']['NotificationRequest'];
export type PaymentOptionsRequest = components['schemas']['PaymentOptionsRequest'];
export type PriceCheckRequest = components['schemas']['PriceCheckRequest'];
export type PropertyAvailabilityRequest = components['schemas']['PropertyAvailabilityRequest'];
export type PropertySearchRequest = components['schemas']['PropertySearchRequest'];
export type PropertySearchResponse = components['schemas']['PropertySearchResponse'];
export type RegionAvailabilityRequest = components['schemas']['RegionAvailabilityRequest'];
export type RetrieveBookingsResponse = components['schemas']['RetrieveBookingsResponse'];
export type Address = components['schemas']['Address'];
export type AgeCategory = components['schemas']['AgeCategory'];
export type Amenity = components['schemas']['Amenity'];
export type Area = components['schemas']['Area'];
export type Attributes = components['schemas']['Attributes'];
export type BedGroup = components['schemas']['BedGroup'];
export type BillableCurrency = components['schemas']['BillableCurrency'];
export type CancelPenalty = components['schemas']['CancelPenalty'];
export type CancelRefund = components['schemas']['CancelRefund'];
export type Configuration = components['schemas']['Configuration'];
export type Contact = components['schemas']['Contact'];
export type Conversation = components['schemas']['Conversation'];
export type DateRange = components['schemas']['DateRange'];
export type Description = components['schemas']['Description'];
export type GuestRating = components['schemas']['GuestRating'];
export type Image = components['schemas']['Image'];
export type Link = components['schemas']['Link'];
export type MaxAllowed = components['schemas']['MaxAllowed'];
export type Occupancy = components['schemas']['Occupancy'];
export type Phone = components['schemas']['Phone'];
export type Price = components['schemas']['Price'];
export type Pricing = components['schemas']['Pricing'];
export type PropertyRating = components['schemas']['PropertyRating'];
export type Rate = components['schemas']['Rate'];
export type RecordBookingRequest = components['schemas']['RecordBookingRequest'];
export type Room = components['schemas']['Room'];
export type Total = components['schemas']['Total'];
export type Totals = components['schemas']['Totals'];
export type BaseImage = components['schemas']['BaseImage'];
export type CurrencyDetail = components['schemas']['CurrencyDetail'];
export type Itinerary = components['schemas']['Itinerary'];
export type Links = components['schemas']['Links'];
export type PriceCurrencyDetail = components['schemas']['PriceCurrencyDetail'];
export type PriceDetail = components['schemas']['PriceDetail'];
export type Promotion = components['schemas']['Promotion'];
export type RapidBedGroup = components['schemas']['RapidBedGroup'];
export type RapidError = components['schemas']['RapidError'];
export type RapidImage = components['schemas']['RapidImage'];
export type RapidLink = components['schemas']['RapidLink'];
export type RapidPricing = components['schemas']['RapidPricing'];
export type RapidRate = components['schemas']['RapidRate'];
export type RapidRoom = components['schemas']['RapidRoom'];
export type AvailabilityResponse = components['schemas']['AvailabilityResponse'];
export type ErrorResponse = components['schemas']['ErrorResponse'];
export type MessageResponse = components['schemas']['MessageResponse'];
export type PaymentOptionsResponse = components['schemas']['PaymentOptionsResponse'];
export type PropertyAddress = components['schemas']['PropertyAddress'];
export type PropertyAvailability = components['schemas']['PropertyAvailability'];
export type PropertyCoordinates = components['schemas']['PropertyCoordinates'];
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
export enum ApiPaths {
    PutAdd_customer = "/add_customer",
    PostAvailability = "/availability",
    GetBooking = "/booking",
    GetBookings = "/bookings",
    PostNotificationExpedia = "/notification/expedia",
    PostPayment_options = "/payment_options",
    PostPrice_check = "/price_check",
    PostProperty_availability = "/property_availability",
    PostProperty_search = "/property_search",
    PostRecord_booking = "/record_booking",
    PostRegion_availability = "/region_availability"
}
